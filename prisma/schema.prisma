// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int             @id @default(autoincrement()) @db.UnsignedInt()
  email        String          @unique
  password     String
  avatar       String?
  nickName     String?
  qq           String?
  categoty     category[]
  Post         Post[]
  comment      comment[]
  reply        Reply[]
  video        VideoCategory[]
  role         String?
  Video        Video[]
  like         like[]
  collect      collect[]
  ReplyVideo   ReplyVideo[]
  createdAt    DateTime        @default(now())
  blackRole    Boolean         @default(false)
  personalSign String?
  ip           String?
  friends      Friend[]
}

model Friend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      user     @relation(fields: [friendId], references: [id])
  friendId  Int      @db.UnsignedInt()
}

model category {
  id     Int     @id @default(autoincrement()) @db.UnsignedInt
  user   user?   @relation(fields: [userId], references: [id])
  userId Int?    @db.UnsignedInt()
  name   String
  cover  String?
  post   Post[]
}

model Post {
  id         Int       @id @default(autoincrement())
  user       user?     @relation(fields: [userId], references: [id])
  userId     Int?      @db.UnsignedInt()
  title      String
  content    String
  comment    comment[]
  category   category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @db.UnsignedInt
  covers     String    @db.Text
  createdAt  DateTime  @default(now())
}

model comment {
  id        Int      @id @default(autoincrement())
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  user      user?    @relation(fields: [userId], references: [id])
  userId    Int?     @db.UnsignedInt()
  createdAt DateTime @default(now())
  content   String
  reply     Reply[]
}

model Reply {
  id           Int      @id @default(autoincrement())
  comment      comment? @relation(fields: [commentId], references: [id])
  commentId    Int?
  user         user?    @relation(fields: [userId], references: [id])
  userId       Int?     @db.UnsignedInt()
  replyContent String
  Replies      Reply[]  @relation("nestedReply")
  reply        Reply?   @relation("nestedReply", fields: [replyId], references: [id])
  replyId      Int
}

model VideoCategory {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt()
  title       String
  cover       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user?    @relation(fields: [userId], references: [id])
  userId      Int?     @db.UnsignedInt()
  Video       Video[]
}

model Video {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt()
  title           String
  cover           String
  description     String?
  videoUrl        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            user?          @relation(fields: [userId], references: [id])
  userId          Int?           @db.UnsignedInt()
  VideoCategory   VideoCategory? @relation(fields: [videoCategoryId], references: [id])
  videoCategoryId Int            @db.UnsignedInt()
  likeList        like[]
  collectList     collect[]
  comment         commentVideo[]
}

model commentVideo {
  id        Int          @id @default(autoincrement()) @db.UnsignedInt()
  video     Video        @relation(fields: [videoId], references: [id])
  videoId   Int          @db.UnsignedInt()
  createdAt DateTime     @default(now())
  content   String
  reply     ReplyVideo[]
}

model ReplyVideo {
  id           Int           @id @default(autoincrement()) @db.UnsignedInt()
  comment      commentVideo? @relation(fields: [commentId], references: [id])
  commentId    Int?          @db.UnsignedInt()
  user         user?         @relation(fields: [userId], references: [id])
  userId       Int?          @db.UnsignedInt()
  replyContent String
  Replies      ReplyVideo[]  @relation("nestedReply")
  reply        ReplyVideo?   @relation("nestedReply", fields: [replyId], references: [id])
  replyId      Int           @db.UnsignedInt()
}

model like {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  user      user?    @relation(fields: [userId], references: [id])
  userId    Int?     @db.UnsignedInt()
  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   Int      @db.UnsignedInt()
  createdAt DateTime @default(now())
}

model collect {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  user      user?    @relation(fields: [userId], references: [id])
  userId    Int?     @db.UnsignedInt()
  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   Int      @db.UnsignedInt()
  createdAt DateTime @default(now())
}

model message {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  sender    String
  avatar    String
  userId    Int      @db.UnsignedInt()
  content   String
  createdAt DateTime @default(now())
}
